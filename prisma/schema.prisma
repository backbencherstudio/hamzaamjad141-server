generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String?
  image        String?
  license      Licese  @default(NO_LICENCE)
  role         Role    @default(USER)
  authProvider String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  instructorId String?
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
  addLog       AddLog[]
  Weather      Weather[]

  subscription          Subscription[]
  currentSubscriptionId String?

  @@map("users")
}

model Ucode {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  license  Licese  @default(NO_LICENCE)
  otp      String?

  permissionToChangePassword Boolean @default(false)

  expiration DateTime?
  createdAt  DateTime  @default(now())
}

model Instructor {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([email])
}

model AddLog {
  id           Int          @id @default(autoincrement())
  date         DateTime     @default(now())
  from         String
  to           String
  aircrafttype String
  tailNumber   String
  flightTime   String
  pictime      String
  dualrcv      String
  daytime      String
  nightime     String
  ifrtime      String
  crossCountry String
  takeoffs     Int
  landings     Int
  userId       String
  status       addlogStatus @default(PENDING)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  action       Action       @default(active)
  updatedAt    DateTime     @updatedAt
  createdAt    DateTime     @default(now())
}

model Location {
  id   String @id @default(uuid())
  name String @unique
}

model Weather {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  location  String
  status    weatherStatus @default(FAVURATE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Portcusts {
  id       String   @id @default(cuid())
  title    String
  hostName String
  date     DateTime
  mp3      String
  cover    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ebook {
  id        String   @id @default(cuid())
  title     String
  pdf       String
  cover     String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  price                Float
  startDate            DateTime           @default(now())
  endDate              DateTime
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  promoCodeId          String?
  promoCode PromoCode? @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  trialPeriod          Boolean            @default(false)

  subscribedBy SubscriptionMethord @default(STRIPE)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

enum SubscriptionMethord {
  STRIPE
  CODE
}

model PromoCode {
  id        String   @id @default(cuid())
  code      String   @unique
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("promoCode") 
}



enum promoCodeStstus {
  USED
  ACTIVE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  DEACTIVE
}

enum Action {
  active
  inactive
}

enum weatherStatus {
  FAVURATE
  HOMEBASE
}

enum Role {
  USER
  ADMIN
}

enum addlogStatus {
  PENDING
  REJECT
  APPROVE
}

enum Licese {
  NO_LICENCE
  SPL
  PPL
  CPL
  ATPL
  CH
}