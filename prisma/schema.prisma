generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  password     String?
  image        String?
  license      Licese     @default(NO_LICENCE)
  role         Role       @default(USER)
  status       userStatus @default(ACTIVE)
  authProvider String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  instructorId String?
  instructor   Instructor? @relation(fields: [instructorId], references: [id])

  addLog  AddLog[]
  Weather Weather[]

  promoCode PromoCode?
  // premiumUser Boolean    @default(true)
  premium   Boolean    @default(true)

  subscription          Subscription[]
  currentSubscriptionId String?
  stripeCustomerId      String?

  @@map("users")
}

enum userStatus {
  ACTIVE
  DEACTIVE
}

enum Role {
  USER
  ADMIN
}

model Ucode {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  license  Licese  @default(NO_LICENCE)
  otp      String?

  permissionToChangePassword Boolean @default(false)

  expiration DateTime?
  createdAt  DateTime  @default(now())
}

enum Licese {
  NO_LICENCE
  SPL
  PPL
  CPL1
  ATPL
  CH
}

model Instructor {
  id    String @id @default(cuid())
  name  String
  email String
  phone String
  users User[]

  status instructorType @default(ACTIVE)
  verify Boolean        @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([email])
}

enum instructorType {
  ACTIVE
  DEACTIVE
}

model AddLog {
  id           String   @id @default(cuid())
  date         DateTime
  from         String
  to           String
  aircrafttype String
  tailNumber   String

  flightTime Float
  pictime    Float
  dualrcv    String

  daytime      Float
  nightime     Float
  ifrtime      Float
  crossCountry Int
  takeoffs     Int
  landings     Int

  userId String
  status addlogStatus @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  action Action @default(active)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum Action {
  active
  inactive

}

enum addlogStatus {
  PENDING
  REJECT
  APPROVE
  UNVERIFIED
}

model Location {
  id   String @id @default(uuid())
  name String @unique
}

model Weather {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  location  String
  status    weatherStatus @default(FAVURATE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum weatherStatus {
  FAVURATE
  HOMEBASE
}

model Portcusts {
  id       String   @id @default(cuid())
  title    String
  hostName String
  date     DateTime
  mp3      String
  cover    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ebook {
  id        String   @id @default(cuid())
  title     String
  pdf       String
  cover     String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  price                Float
  startDate            DateTime           @default(now())
  endDate              DateTime
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  promoCodeId          String?

  trialPeriod  Boolean             @default(false)
  subscribedBy SubscriptionMethord @default(STRIPE)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

enum SubscriptionMethord {
  STRIPE
  CODE
}

enum SubscriptionStatus {
  ACTIVE
  DEACTIVE
}

model PromoCode {
  id     String          @id @default(cuid())
  code   String          @unique
  status PromoCodeStatus @default(ACTIVE)
  userId String?         @unique
  user   User?           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum PromoCodeStatus {
  ACTIVE
  USED
}
